{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///home/user/agenko-nextjs/src/app/api/contact/route.ts"],"sourcesContent":["import { NextResponse, NextRequest } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\n// The URL for your n8n webhook\nconst WEBHOOK_URL = 'https://webhooks-n8n.studiodental.digital/webhook/40d61430-5bf1-4a5e-a931-8ef0fe643769';\n\n// Initialize Supabase client\n// Ensure these environment variables are correctly set in your Vercel project settings\n// and in your local .env.local file for development.\n// IMPORTANT: Use the SERVICE_ROLE_KEY for server-side operations if you need to bypass RLS.\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!; // Using NEXT_PUBLIC_SUPABASE_URL as it's provided\nconst supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\nconst supabase = createClient(supabaseUrl, supabaseServiceRoleKey);\n\n// Table name in Supabase\nconst SUPABASE_TABLE_NAME = 'leads-form-hof-sd-gabriellalisboa';\n\n// --- Helper Functions (Replicated from n8n logic) ---\n\n/**\n * Function to clean WhatsApp number and ensure exactly 11 digits (Brazilian format).\n * @param whatsappInput The raw WhatsApp number string.\n * @returns Cleaned WhatsApp number as a string, or null if invalid.\n */\nfunction cleanWhatsAppNumber(whatsappInput: string | number | null | undefined): string | null {\n  if (!whatsappInput) {\n    return null;\n  }\n\n  // Remove all non-digit characters\n  let cleaned = whatsappInput.toString().replace(/\\D/g, '');\n\n  // Remove country code if present (55 for Brazil) and if it makes the number too long\n  if (cleaned.startsWith('55') && cleaned.length > 11) {\n    cleaned = cleaned.substring(2);\n  }\n\n  // Ensure exactly 11 digits\n  if (cleaned.length === 11) {\n    return cleaned;\n  } else if (cleaned.length === 10) {\n    // Add '9' after area code for mobile numbers (assuming 2-digit area code)\n    // This assumes 2-digit area codes for Brazil.\n    return cleaned.substring(0, 2) + '9' + cleaned.substring(2);\n  } else if (cleaned.length > 11) {\n    // Take the last 11 digits\n    return cleaned.substring(cleaned.length - 11);\n  } else {\n    // Invalid number - less than 10 digits\n    return null;\n  }\n}\n\n/**\n * Helper function to manually parse a URL query string without any modules.\n * This version ensures all URL parameters are present, setting the value to null if it's blank.\n * @param url The full URL string to parse.\n * @returns An object containing `queryParams` (key-value pairs of URL parameters) and `baseUrl`.\n */\nfunction parseQueryString(url: string): { queryParams: { [key: string]: string | null }, baseUrl: string } {\n  const params: { [key: string]: string | null } = {};\n  const queryStringIndex = url.indexOf('?');\n\n  if (queryStringIndex === -1) {\n    return { queryParams: params, baseUrl: url };\n  }\n\n  const baseUrl = url.substring(0, queryStringIndex);\n  const queryString = url.substring(queryStringIndex + 1);\n\n  if (queryString) {\n    const pairs = queryString.split('&');\n    for (const pair of pairs) {\n      const parts = pair.split('=', 2);\n      if (parts[0]) {\n        const key = decodeURIComponent(parts[0]);\n        // Set value to null if empty string, otherwise decode and use it.\n        const value = parts[1] !== undefined && parts[1] !== '' ? decodeURIComponent(parts[1].replace(/\\+/g, ' ')) : null;\n        if (key) {\n          params[key] = value;\n        }\n      }\n    }\n  }\n  return { queryParams: params, baseUrl: baseUrl };\n}\n\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { nome, whatsapp, email } = body;\n\n    // --- SERVER-SIDE VALIDATION ---\n    if (!nome || typeof nome !== 'string' || nome.trim().length < 2) {\n      return NextResponse.json({ message: 'Nome inválido fornecido.' }, { status: 400 });\n    }\n    if (!email || typeof email !== 'string' || !email.includes('@') || !email.includes('.')) {\n      return NextResponse.json({ message: 'Email inválido fornecido.' }, { status: 400 });\n    }\n    if (!whatsapp || typeof whatsapp !== 'string' || whatsapp.replace(/\\D/g, '').length < 10) {\n      return NextResponse.json({ message: 'WhatsApp inválido fornecido.' }, { status: 400 });\n    }\n\n    // --- EXTRACT ADDITIONAL DATA & PROCESS ---\n    const userAgent = request.headers.get('user-agent') || 'Unknown';\n    const pageUrl = request.headers.get('referer') || 'Unknown';\n    // Access IP via 'x-forwarded-for' header, which Vercel populates. NextRequest.ip is not available.\n    const remoteIp = request.headers.get('x-forwarded-for')?.split(',')[0].trim() || 'Unknown';\n\n    // Process WhatsApp number using the replicated n8n logic\n    const whatsappCleaned = cleanWhatsAppNumber(whatsapp);\n    const whatsappFieldFacebook = whatsappCleaned ? `55${whatsappCleaned}` : null;\n\n    // Clean the URL of template placeholders for parsing\n    const cleanedUrlForParsing = pageUrl.replace(/\\{\\{.*?\\}\\}/g, '').replace(/\\{.*?\\}/g, '');\n    const { queryParams } = parseQueryString(cleanedUrlForParsing);\n\n    // Generate timestamps\n    const processedDate = new Date();\n    const dateTimeUtc = processedDate.toISOString();\n    const urlProcessedAtTimestamp = processedDate.getTime().toString(); // Store as string for character varying column\n\n    const saoPauloOptions: Intl.DateTimeFormatOptions = {\n      timeZone: 'America/Sao_Paulo',\n      year: 'numeric', month: '2-digit', day: '2-digit',\n      hour: '2-digit', minute: '2-digit', second: '2-digit',\n      hour12: false\n    };\n\n    const formatter = new Intl.DateTimeFormat('pt-BR', saoPauloOptions);\n\n    // Define a type for the parts object to avoid TypeScript errors\n    interface DateTimeParts {\n      year?: string;\n      month?: string;\n      day?: string;\n      hour?: string;\n      minute?: string;\n      second?: string;\n      [key: string]: string | undefined; // Allow other properties\n    }\n\n    const parts = formatter.formatToParts(processedDate).reduce<DateTimeParts>((acc, part) => {\n      if (part.type !== 'literal') { acc[part.type as keyof DateTimeParts] = part.value; }\n      return acc;\n    }, {});\n\n    const dateTimeAmericaSaoPaulo = `${parts.year}-${parts.month}-${parts.day} ${parts.hour}:${parts.minute}:${parts.second}`;\n\n\n    // --- PREPARE DATA FOR SUPABASE INSERT ---\n    const supabasePayload = {\n      form_name: 'leads-form-hof-sd-gabriellalisboa', // Assuming a static form name for this table\n      nome: nome.trim(),\n      email: email.trim(),\n      whatsapp_field_facebook: whatsappFieldFacebook,\n      date_time_utc: dateTimeUtc,\n      date_time_america_sao_paulo: dateTimeAmericaSaoPaulo,\n      date_time_timestamp: urlProcessedAtTimestamp, // Using urlProcessedAtTimestamp for date_time_timestamp column\n      remote_ip: remoteIp,\n      webhookUrl: WEBHOOK_URL,\n      'user-agent': userAgent, // Column name is 'user-agent' in Supabase (needs to be quoted if it contains hyphens)\n\n      // Mapping URL parameters to specific Supabase columns\n      url_param_keyword: queryParams.keyword || queryParams.utm_term || null,\n      url_param_cost: queryParams.cost || null,\n      url_param_fbclid: queryParams.fbclid || null,\n      url_param_gclid: queryParams.gclid || null,\n      url_param_ttclid: queryParams.ttclid || null,\n      url_param_ad_id: queryParams.ad_id || null,\n      url_param_ad_campaign_id: queryParams.ad_campaign_id || null,\n      url_parameters_subid: queryParams.subid || null,\n      url_parameters_ktr_campaign_id: queryParams.ktr_campaign_id || null,\n      url_parameters_cost: queryParams.cost || null, // Assuming cost can also be here\n      url_processed_at_timestamp: urlProcessedAtTimestamp,\n      url_parameters_ktr_landing_id: queryParams.ktr_landing_id || null,\n      url_parameters_ktr_stream_id: queryParams.ktr_stream_id || null,\n      url_parameters_source: queryParams.utm_source || queryParams.source || null,\n      url_parameters_search_engine: queryParams.search_engine || null,\n      url_parameters_ktr_keyword: queryParams.ktr_keyword || null,\n      url_parameters_sub_id_1_placement: queryParams.sub_id_1_placement || null,\n      url_parameters_sub_id_10_advanced_booking_window: queryParams.sub_id_10_advanced_booking_window || null,\n      url_parameters_sub_id_11_matchtype: queryParams.sub_id_11_matchtype || null,\n      url_parameters_sub_id_12_targetid: queryParams.sub_id_12_targetid || null,\n      url_parameters_sub_id_13_extension_id: queryParams.sub_id_13_extension_id || null,\n      url_parameters_sub_id_14_device: queryParams.sub_id_14_device || null,\n      url_parameters_sub_id_3_adgroupid: queryParams.sub_id_3_adgroupid || null,\n      url_parameters_sub_id_4_creative: queryParams.sub_id_4_creative || null,\n      url_parameters_sub_id_5_keyword: queryParams.sub_id_5_keyword || null,\n      url_parameters_sub_id_6_network: queryParams.sub_id_6_network || null,\n      url_parameters_traffic_source_name: queryParams.traffic_source_name || null,\n      url_parameters_x_requested_with: queryParams.x_requested_with || null,\n      url_parameters_sub_id_2_adposition: queryParams.sub_id_2_adposition || null,\n      // Add other UTM parameters if needed\n      url_param_utm_source: queryParams.utm_source || null,\n      url_param_utm_medium: queryParams.utm_medium || null,\n      url_param_utm_campaign: queryParams.utm_campaign || null,\n      url_param_utm_content: queryParams.utm_content || null,\n    };\n\n    // --- INSERT DATA INTO SUPABASE ---\n    const { data, error: supabaseError } = await supabase\n      .from(SUPABASE_TABLE_NAME)\n      .insert([supabasePayload]);\n\n    if (supabaseError) {\n      console.error('Supabase insertion error:', supabaseError.message);\n      return NextResponse.json({ message: 'Erro ao salvar no banco de dados.' }, { status: 500 });\n    }\n\n    console.log('Data successfully saved to Supabase:', data);\n\n\n    // --- PREPARE DATA FOR ORIGINAL WEBHOOK (N8N) ---\n    // The n8n logic expects raw `whatsapp` and `page_url` in the body\n    // so it can perform its own cleaning and parsing.\n    const webhookPayload = {\n      nome: nome.trim(),\n      email: email.trim(),\n      whatsapp: whatsapp, // Send original whatsapp to n8n for its cleaning\n      page_url: pageUrl, // Send original page_url to n8n for its parsing\n      timestamp: dateTimeUtc, // Use the generated UTC timestamp\n      source: 'nextjs_contact_form_v1',\n      user_agent: userAgent\n    };\n\n    console.log('Forwarding to webhook:', webhookPayload);\n\n    // --- SEND DATA TO EXTERNAL WEBHOOK ---\n    const webhookResponse = await fetch(WEBHOOK_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(webhookPayload)\n    });\n\n    if (!webhookResponse.ok) {\n      console.error(`Webhook failed with status: ${webhookResponse.status}`, await webhookResponse.text());\n      return NextResponse.json({ message: 'Ocorreu um erro ao processar sua solicitação no webhook.' }, { status: 502 });\n    }\n\n    console.log('Webhook submission successful.');\n\n    return NextResponse.json({ message: 'Formulário enviado com sucesso!' }, { status: 200 });\n\n  } catch (error) {\n    console.error('Error processing form submission:', error);\n    return NextResponse.json({ message: 'Erro ao processar o envio do formulário.' }, { status: 500 });\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}